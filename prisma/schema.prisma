generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Alumno {
  id                       Int             @id @default(autoincrement())
  nombre                   String
  apellido                 String
  dni                      String          @unique
  activo                   Boolean         @default(true)
  fechaNacimiento          DateTime
  email                    String?
  telefono                 String?
  numeroEmergencia         String?
  direccion                String?
  obraSocial               String?
  nombreTutor              String?
  dniTutor                 String?
  notas                    String?
  fechaIngreso             DateTime        @default(now())
  recibos                  Recibo[]
  alumnosSueltosAnteriores AlumnoSuelto[]  @relation("AlumnoSueltoRegular")
  ctaCte                   CtaCte?
  estilos                  Estilo[]        @relation("AlumnoEstilos")
  asistencias              Asistencia[]
  alumnoEstilos            AlumnoEstilos[]
  deudas                   Deuda[]
  createdAt                DateTime        @default(now())
  updatedAt                DateTime        @updatedAt
}

model Deuda {
  id        Int      @id @default(autoincrement())
  alumno    Alumno   @relation(fields: [alumnoId], references: [id])
  alumnoId  Int
  monto     Float
  mes       String
  anio      Int
  estilo    Estilo   @relation(fields: [estiloId], references: [id])
  estiloId  Int
  pagada    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Concepto {
  id          Int      @id @default(autoincrement())
  nombre      String
  descripcion String?
  monto       Float
  estiloId    Int?
  estilo      Estilo?  @relation(fields: [estiloId], references: [id]) // Añadido ? para hacerlo opcional
  recibos     Recibo[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum TipoPago {
  EFECTIVO
  MERCADO_PAGO
  TRANSFERENCIA
  DEBITO_AUTOMATICO
  OTRO
}

model Recibo {
  id             Int           @id @default(autoincrement())
  numeroRecibo   Int           @unique @default(autoincrement())
  fecha          DateTime      @default(now())
  monto          Float
  periodoPago    String
  tipoPago       TipoPago
  fueraDeTermino Boolean       @default(false)
  esClaseSuelta  Boolean       @default(false)
  alumno         Alumno?       @relation(fields: [alumnoId], references: [id])
  alumnoId       Int?
  alumnoSuelto   AlumnoSuelto? @relation(fields: [alumnoSueltoId], references: [id])
  alumnoSueltoId Int?
  concepto       Concepto      @relation(fields: [conceptoId], references: [id])
  conceptoId     Int
  detallesLiquidacion DetalleLiquidacion[]
  claseId        Int?
  clase          Clase?        @relation(fields: [claseId], references: [id])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Estilo {
  id            Int             @id @default(autoincrement())
  nombre        String
  monto         Float           @default(0)
  deudas        Deuda[]
  conceptos     Concepto[]
  clases        Clase[]
  descripcion   String?
  importe       Float    @default(0)
  profesorId    Int?
  alumnoEstilos AlumnoEstilos[]
  profesor      Profesor?       @relation(fields: [profesorId], references: [id])
  alumnos       Alumno[]        @relation("AlumnoEstilos")
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model AlumnoEstilos {
  id        Int     @id @default(autoincrement())
  alumno    Alumno  @relation(fields: [alumnoId], references: [id])
  alumnoId  Int
  estilo    Estilo  @relation(fields: [estiloId], references: [id])
  estiloId  Int
  activo    Boolean @default(true)

  @@unique([alumnoId, estiloId])
}

model Profesor {
  id            Int           @id @default(autoincrement())
  nombre        String
  apellido      String
  dni           String        @unique
  email         String?
  telefono      String?
  clases        Clase[]
  fechaIngreso  DateTime      @default(now())
  estilos       Estilo[]
  liquidaciones Liquidacion[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model CtaCte {
  id        Int      @id @default(autoincrement())
  saldo     Float
  alumno    Alumno   @relation(fields: [alumnoId], references: [id])
  alumnoId  Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CajaDiaria {
  id         Int      @id @default(autoincrement())
  fecha      DateTime @unique @default(now())
  apertura   Float
  cierre     Float
  diferencia Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Clase {
  id             Int            @id @default(autoincrement())
  fecha          DateTime       @default(now())
  profesorId     Int
  profesor       Profesor       @relation(fields: [profesorId], references: [id])
  estiloId       Int
  estilo         Estilo         @relation(fields: [estiloId], references: [id])
  asistencias    Asistencia[]
  alumnosSueltos AlumnoSuelto[]
  recibos        Recibo[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Asistencia {
  id        Int      @id @default(autoincrement())
  claseId   Int
  clase     Clase    @relation(fields: [claseId], references: [id])
  alumnoId  Int
  alumno    Alumno   @relation(fields: [alumnoId], references: [id])
  asistio   Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AlumnoSuelto {
  id              Int      @id @default(autoincrement())
  nombre          String
  apellido        String
  dni             String   @unique
  telefono        String?
  email           String?
  recibos         Recibo[]
  clases          Clase[]
  alumnoRegularId Int?
  alumnoRegular   Alumno?  @relation("AlumnoSueltoRegular", fields: [alumnoRegularId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

enum EstadoLiquidacion {
  PENDIENTE
  PAGADA
  ANULADA
}

model Liquidacion {
  id              Int               @id @default(autoincrement())
  fecha           DateTime          @default(now())
  mes             Int
  anio            Int
  profesor        Profesor?         @relation(fields: [profesorId], references: [id]) // Hacemos la relación opcional
  profesorId      Int?              // Hacemos el campo opcional
  montoTotal      Float
  montoCursos     Float
  montoClasesSueltas Float
  porcentajeCursos Float           @default(0.60)  // 60% por defecto
  porcentajeClasesSueltas Float    @default(0.80)  // 80% por defecto
  estado          EstadoLiquidacion @default(PENDIENTE)
  metodoPago      TipoPago?
  fechaPago       DateTime?
  observaciones   String?
  detalles        DetalleLiquidacion[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model DetalleLiquidacion {
  id            Int         @id @default(autoincrement())
  liquidacion   Liquidacion @relation(fields: [liquidacionId], references: [id])
  liquidacionId Int
  reciboId      Int        
  recibo        Recibo     @relation(fields: [reciboId], references: [id])
  montoOriginal Float
  porcentaje    Float
  montoLiquidado Float
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}
