generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Alumno {
  id                       Int                      @id @default(autoincrement())
  nombre                   String
  apellido                 String
  dni                      String                   @unique
  fechaNacimiento          DateTime
  email                    String?
  telefono                 String?
  fechaIngreso             DateTime                 @default(now())
  createdAt                DateTime                 @default(now())
  updatedAt                DateTime                 @updatedAt
  activo                   Boolean                  @default(true)
  numeroEmergencia         String?
  direccion                String?
  obraSocial               String?
  nombreTutor              String?
  dniTutor                 String?
  notas                    String?
  fechaBaja                DateTime?
  motivoBaja               String?
  fechaPagoInscripcion     DateTime?
  inscripcionPagada        Boolean                  @default(false) @ignore
  alumnoEstilos            AlumnoEstilos[]
  alumnosSueltosAnteriores AlumnoSuelto[]           @relation("AlumnoSueltoRegular")
  asistencias              Asistencia[]
  configuracionPago        ConfiguracionPagoAlumno?
  ctaCte                   CtaCte?
  descuentosVigentes       DescuentoAplicado[]
  deudas                   Deuda[]
  inscripciones            Inscripcion?             @relation("InscripcionesAlumno")
  recibos                  Recibo[]
  estilos                  Estilo[]                 @relation("AlumnoEstilos")
}

model ConfiguracionPagoAlumno {
  id            Int      @id @default(autoincrement())
  alumnoId      Int      @unique
  diaPago       Int?
  metodoPago    TipoPago @default(EFECTIVO)
  descuentoFijo Float?
  observaciones String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  alumno        Alumno   @relation(fields: [alumnoId], references: [id])
}

model Descuento {
  id           Int                 @id @default(autoincrement())
  nombre       String
  porcentaje   Float
  activo       Boolean             @default(true)
  esAutomatico Boolean             @default(false)
  minEstilos   Int?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  aplicadoA    DescuentoAplicado[]
}

model DescuentoAplicado {
  id          Int       @id @default(autoincrement())
  descuentoId Int
  alumnoId    Int
  fechaInicio DateTime  @default(now())
  fechaFin    DateTime?
  activo      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  alumno      Alumno    @relation(fields: [alumnoId], references: [id])
  descuento   Descuento @relation(fields: [descuentoId], references: [id])
}

model Deuda {
  id               Int            @id @default(autoincrement())
  alumnoId         Int
  monto            Float
  mes              String
  estiloId         Int
  pagada           Boolean        @default(false)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  anio             Int
  fechaPago        DateTime?
  montoOriginal    Float?         @default(0)
  fechaVencimiento DateTime
  conceptoId       Int?
  esInscripcion    Boolean        @default(false)
  tipoDeuda        TipoModalidad?
  cantidadClases   Int?
  alumno           Alumno         @relation(fields: [alumnoId], references: [id])
  concepto         Concepto?      @relation(fields: [conceptoId], references: [id])
  estilo           Estilo         @relation(fields: [estiloId], references: [id])
  pagos            PagoDeuda[]

  @@index([alumnoId, mes, anio])
}

model PagoDeuda {
  id        Int      @id @default(autoincrement())
  deudaId   Int
  reciboId  Int
  monto     Float
  fecha     DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deuda     Deuda    @relation(fields: [deudaId], references: [id])
  recibo    Recibo   @relation(fields: [reciboId], references: [id])

  @@index([deudaId])
}

model Inscripcion {
  id         Int       @id @default(autoincrement())
  alumnoId   Int       @unique
  monto      Float
  pagada     Boolean   @default(false)
  fechaPago  DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  conceptoId Int?
  alumno     Alumno    @relation("InscripcionesAlumno", fields: [alumnoId], references: [id])
}

model Concepto {
  id            Int      @id @default(autoincrement())
  nombre        String
  descripcion   String?
  monto         Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  estiloId      Int?
  activo        Boolean  @default(true)
  esInscripcion Boolean  @default(false)
  montoRegular  Float?
  montoSuelto   Float?
  estilo        Estilo?  @relation(fields: [estiloId], references: [id])
  deudas        Deuda[]
  recibos       Recibo[]
}

model Recibo {
  id                  Int                  @id @default(autoincrement())
  fecha               DateTime             @default(now())
  monto               Float
  alumnoId            Int?
  conceptoId          Int
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  numeroRecibo        Int                  @unique @default(autoincrement())
  periodoPago         String
  tipoPago            TipoPago
  fueraDeTermino      Boolean              @default(false)
  claseId             Int?
  esClaseSuelta       Boolean              @default(false)
  alumnoSueltoId      Int?
  anulado             Boolean              @default(false)
  descuento           Float?
  esMesCompleto       Boolean              @default(false)
  fechaEfecto         DateTime             @default(now())
  montoOriginal       Float
  motivoAnulacion     String?
  referenciaRecibo    Int?
  detallesLiquidacion DetalleLiquidacion[]
  pagosDeuda          PagoDeuda[]
  alumno              Alumno?              @relation(fields: [alumnoId], references: [id])
  alumnoSuelto        AlumnoSuelto?        @relation(fields: [alumnoSueltoId], references: [id])
  clase               Clase?               @relation(fields: [claseId], references: [id])
  concepto            Concepto             @relation(fields: [conceptoId], references: [id])
  reciboAnulado       Recibo?              @relation("ReciboAnulado", fields: [referenciaRecibo], references: [id])
  recibosAnulados     Recibo[]             @relation("ReciboAnulado")

  @@index([fecha])
  @@index([alumnoId, fecha])
}

model Estilo {
  id             Int              @id @default(autoincrement())
  nombre         String
  descripcion    String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  profesorId     Int?
  monto          Float            @default(0)
  importe        Float            @default(0)
  alumnoEstilos  AlumnoEstilos[]
  clases         Clase[]
  conceptos      Concepto[]
  deudas         Deuda[]
  profesor       Profesor?        @relation(fields: [profesorId], references: [id])
  ModalidadClase ModalidadClase[]
  alumnos        Alumno[]         @relation("AlumnoEstilos")
}

model AlumnoEstilos {
  alumnoId               Int
  estiloId               Int
  activo                 Boolean   @default(true)
  id                     Int       @id @default(autoincrement())
  descuentoPersonalizado Float?
  fechaFin               DateTime?
  fechaInicio            DateTime  @default(now())
  montoPersonalizado     Float?
  observaciones          String?
  modalidadId            Int?
  alumno                 Alumno    @relation(fields: [alumnoId], references: [id])
  estilo                 Estilo    @relation(fields: [estiloId], references: [id])

  @@unique([alumnoId, estiloId])
  @@index([activo])
}

model ModalidadClase {
  id         Int           @id @default(autoincrement())
  tipo       TipoModalidad
  porcentaje Float
  estiloId   Int
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @default(now())
  estilo     Estilo        @relation(fields: [estiloId], references: [id])
}

model Profesor {
  id                                Int              @id @default(autoincrement())
  nombre                            String
  apellido                          String
  dni                               String           @unique
  email                             String?
  telefono                          String?
  fechaIngreso                      DateTime         @default(now())
  createdAt                         DateTime         @default(now())
  updatedAt                         DateTime         @updatedAt
  cuit                              String?
  direccion                         String?
  fechaNacimiento                   DateTime?
  porcentajePorDefecto              Float            @default(0.60)
  porcentajeClasesSueltasPorDefecto Float            @default(0.80)
  activo                            Boolean          @default(true)
  montoFijoRegular                  Float?           @default(0)
  montoFijoSueltas                  Float?           @default(0)
  tipoLiquidacionRegular            TipoLiquidacion? @default(PORCENTAJE)
  tipoLiquidacionSueltas            TipoLiquidacion? @default(PORCENTAJE)
  clases                            Clase[]
  estilos                           Estilo[]
  liquidaciones                     Liquidacion[]
}

model CtaCte {
  id        Int      @id @default(autoincrement())
  saldo     Float
  alumnoId  Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  alumno    Alumno   @relation(fields: [alumnoId], references: [id])
}

model CajaDiaria {
  id         Int      @id @default(autoincrement())
  fecha      DateTime @unique @default(now())
  apertura   Float
  cierre     Float
  diferencia Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Clase {
  id             Int            @id @default(autoincrement())
  fecha          DateTime       @default(now())
  profesorId     Int
  estiloId       Int
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  modalidadId    Int?
  asistencias    Asistencia[]
  estilo         Estilo         @relation(fields: [estiloId], references: [id])
  profesor       Profesor       @relation(fields: [profesorId], references: [id])
  recibos        Recibo[]
  alumnosSueltos AlumnoSuelto[] @relation("AlumnoSueltoToClase")
}

model Asistencia {
  id        Int      @id @default(autoincrement())
  claseId   Int
  alumnoId  Int
  asistio   Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  alumno    Alumno   @relation(fields: [alumnoId], references: [id])
  clase     Clase    @relation(fields: [claseId], references: [id])
}

model AlumnoSuelto {
  id              Int      @id @default(autoincrement())
  nombre          String
  apellido        String
  telefono        String?
  email           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  dni             String   @unique
  alumnoRegularId Int?
  alumnoRegular   Alumno?  @relation("AlumnoSueltoRegular", fields: [alumnoRegularId], references: [id])
  recibos         Recibo[]
  clases          Clase[]  @relation("AlumnoSueltoToClase")
}

model Liquidacion {
  id                      Int                  @id @default(autoincrement())
  fecha                   DateTime             @default(now())
  profesorId              Int?
  createdAt               DateTime             @default(now())
  updatedAt               DateTime             @default(now())
  anio                    Int
  estado                  EstadoLiquidacion    @default(PENDIENTE)
  fechaPago               DateTime?
  mes                     Int
  metodoPago              TipoPago?
  montoClasesSueltas      Float?               @default(0)
  montoCursos             Float?               @default(0)
  montoTotal              Float?               @default(0)
  observaciones           String?
  porcentajeClasesSueltas Float?               @default(0.8)
  porcentajeCursos        Float?               @default(0.6)
  montoTotalRegular       Float?               @default(0)
  montoTotalSueltas       Float?               @default(0)
  totalLiquidar           Float?               @default(0)
  porcentajeRegular       Float?               @default(0.6)
  porcentajeSueltas       Float?               @default(0.8)
  tipoLiquidacionRegular  TipoLiquidacion?     @default(PORCENTAJE)
  tipoLiquidacionSueltas  TipoLiquidacion?     @default(PORCENTAJE)
  montoFijoRegular        Float?
  montoFijoSueltas        Float?
  detalles                DetalleLiquidacion[]
  profesor                Profesor?            @relation(fields: [profesorId], references: [id])

  @@index([mes, anio])
  @@index([profesorId])
}

model DetalleLiquidacion {
  id             Int         @id @default(autoincrement())
  liquidacionId  Int
  reciboId       Int?
  montoOriginal  Float
  porcentaje     Float
  montoLiquidado Float
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  liquidacion    Liquidacion @relation(fields: [liquidacionId], references: [id])
  recibo         Recibo?     @relation(fields: [reciboId], references: [id])
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model ModalidadClase_backup {
  id         Int?
  tipo       String?
  porcentaje Float?
  estiloId   Int?
  createdAt  DateTime?
  updatedAt  DateTime?

  @@ignore
}

enum TipoModalidad {
  REGULAR
  SUELTA
}

enum TipoLiquidacion {
  PORCENTAJE
  MONTO_FIJO
}

enum TipoPago {
  EFECTIVO
  MERCADO_PAGO
  TRANSFERENCIA
  DEBITO_AUTOMATICO
  OTRO
}

enum EstadoLiquidacion {
  PENDIENTE
  PAGADA
  ANULADA
}
