const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function migrarEnNeon() {
  try {
    console.log('üöÄ Migraci√≥n espec√≠fica para Neon Database\n');
    
    // Verificar conexi√≥n
    console.log('üì° Verificando conexi√≥n a Neon...');
    await prisma.$queryRaw`SELECT 1`;
    console.log('‚úÖ Conexi√≥n establecida\n');

    // Backup de conteo de registros
    const counts = {
      profesores: await prisma.profesor.count(),
      liquidaciones: await prisma.liquidacion.count(),
      recibos: await prisma.recibo.count(),
      alumnos: await prisma.alumno.count()
    };
    console.log('üìä Estado actual:', counts);
    console.log('');

    // Ejecutar migraci√≥n paso a paso
    console.log('üîß 1. Creando enum TipoLiquidacion...');
    await prisma.$executeRaw`
      DO $$
      BEGIN
          IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'TipoLiquidacion') THEN
              CREATE TYPE "TipoLiquidacion" AS ENUM ('PORCENTAJE', 'MONTO_FIJO');
              RAISE NOTICE 'Enum TipoLiquidacion creado';
          ELSE
              RAISE NOTICE 'Enum TipoLiquidacion ya existe';
          END IF;
      END$$;
    `;

    console.log('üîß 2. Agregando campos a Profesor...');
    await prisma.$executeRaw`
      ALTER TABLE "Profesor" 
        ADD COLUMN IF NOT EXISTS "montoFijoRegular" FLOAT DEFAULT 0,
        ADD COLUMN IF NOT EXISTS "montoFijoSueltas" FLOAT DEFAULT 0,
        ADD COLUMN IF NOT EXISTS "tipoLiquidacionRegular" "TipoLiquidacion" DEFAULT 'PORCENTAJE',
        ADD COLUMN IF NOT EXISTS "tipoLiquidacionSueltas" "TipoLiquidacion" DEFAULT 'PORCENTAJE'
    `;

    console.log('üîß 3. Agregando campos a Liquidacion...');
    await prisma.$executeRaw`
      ALTER TABLE "Liquidacion" 
        ADD COLUMN IF NOT EXISTS "tipoLiquidacionRegular" "TipoLiquidacion" DEFAULT 'PORCENTAJE',
        ADD COLUMN IF NOT EXISTS "tipoLiquidacionSueltas" "TipoLiquidacion" DEFAULT 'PORCENTAJE',
        ADD COLUMN IF NOT EXISTS "montoFijoRegular" FLOAT,
        ADD COLUMN IF NOT EXISTS "montoFijoSueltas" FLOAT,
        ADD COLUMN IF NOT EXISTS "createdAt" TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP,
        ADD COLUMN IF NOT EXISTS "updatedAt" TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP
    `;

    console.log('üîß 4. Creando √≠ndices...');
    await prisma.$executeRaw`CREATE INDEX CONCURRENTLY IF NOT EXISTS "Liquidacion_mes_anio_idx" ON "Liquidacion"("mes", "anio")`;
    await prisma.$executeRaw`CREATE INDEX CONCURRENTLY IF NOT EXISTS "Liquidacion_profesorId_idx" ON "Liquidacion"("profesorId")`;

    console.log('üîß 5. Inicializando valores...');
    const updateResult = await prisma.$executeRaw`
      UPDATE "Profesor" 
      SET 
        "montoFijoRegular" = COALESCE("montoFijoRegular", 0),
        "montoFijoSueltas" = COALESCE("montoFijoSueltas", 0),
        "tipoLiquidacionRegular" = COALESCE("tipoLiquidacionRegular", 'PORCENTAJE'),
        "tipoLiquidacionSueltas" = COALESCE("tipoLiquidacionSueltas", 'PORCENTAJE')
      WHERE 
        "montoFijoRegular" IS NULL OR
        "montoFijoSueltas" IS NULL OR
        "tipoLiquidacionRegular" IS NULL OR
        "tipoLiquidacionSueltas" IS NULL
    `;

    await prisma.$executeRaw`
      UPDATE "Liquidacion" 
      SET 
        "tipoLiquidacionRegular" = COALESCE("tipoLiquidacionRegular", 'PORCENTAJE'),
        "tipoLiquidacionSueltas" = COALESCE("tipoLiquidacionSueltas", 'PORCENTAJE'),
        "createdAt" = COALESCE("createdAt", "fecha", CURRENT_TIMESTAMP),
        "updatedAt" = COALESCE("updatedAt", "fecha", CURRENT_TIMESTAMP)
    `;

    // Verificaci√≥n final
    console.log('\nüîç Verificaci√≥n final...');
    const sample = await prisma.profesor.findFirst({
      select: {
        nombre: true,
        apellido: true,
        tipoLiquidacionRegular: true,
        montoFijoRegular: true
      }
    });
    console.log('‚úÖ Muestra profesor:', sample);

    const newCounts = {
      profesores: await prisma.profesor.count(),
      liquidaciones: await prisma.liquidacion.count()
    };
    
    console.log('\nüìä Verificaci√≥n de integridad:');
    console.log(`Profesores: ${counts.profesores} ‚Üí ${newCounts.profesores} ${counts.profesores === newCounts.profesores ? '‚úÖ' : '‚ùå'}`);
    console.log(`Liquidaciones: ${counts.liquidaciones} ‚Üí ${newCounts.liquidaciones} ${counts.liquidaciones === newCounts.liquidaciones ? '‚úÖ' : '‚ùå'}`);

    console.log('\nüéâ ¬°Migraci√≥n en Neon completada exitosamente!');
    console.log('\nüìã Pr√≥ximos pasos:');
    console.log('1. Actualiza schema.prisma');
    console.log('2. npx prisma generate');
    console.log('3. npx prisma migrate dev --name add_liquidacion_types');

  } catch (error) {
    console.error('\n‚ùå Error en migraci√≥n:', error);
    console.error('\nüîÑ En Neon puedes:');
    console.error('- Restaurar desde backup autom√°tico');
    console.error('- Usar un branch diferente');
    console.error('- Contactar soporte de Neon si es necesario');
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

migrarEnNeon();